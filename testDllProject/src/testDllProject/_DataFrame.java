package testDllProject;
import com.ochafik.lang.jnaerator.runtime.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * --------------------- \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043e\u0434\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043e\u0442 \u0434\u0435\u043a\u043e\u0434\u0435\u0440\u0430 \u0432 \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435<br>
 * <i>native declaration : line 111</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class _DataFrame extends Structure<_DataFrame, _DataFrame.ByValue, _DataFrame.ByReference > {
	public double Vrema;
	/** C type : float[6] */
	public float[] OsnIzmVel = new float[6];
	/** \u041f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u044b \u0432 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435 \u0432\u0430\u0436\u043d\u043e! */
	public float Temper;
	/** ) */
	public float Skorost;
	/** > \u041d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0434\u0430\u0442\u0447\u0438\u043a \u0441\u0438\u043b\u044b (\u043d\u0435\u043a\u0440\u0443\u0442\u044f\u0449\u0438\u0439\u0441\u044f) */
	public float Moschnost;
	/** ) */
	public byte Azimut;
	public _DataFrame() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("Vrema", "OsnIzmVel", "Temper", "Skorost", "Moschnost", "Azimut");
	}
	/**
	 * @param OsnIzmVel C type : float[6]<br>
	 * @param Temper \u041f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u044b \u0432 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435 \u0432\u0430\u0436\u043d\u043e!<br>
	 * @param Skorost )<br>
	 * @param Moschnost > \u041d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0434\u0430\u0442\u0447\u0438\u043a \u0441\u0438\u043b\u044b (\u043d\u0435\u043a\u0440\u0443\u0442\u044f\u0449\u0438\u0439\u0441\u044f)<br>
	 * @param Azimut )
	 */
	public _DataFrame(double Vrema, float OsnIzmVel[], float Temper, float Skorost, float Moschnost, byte Azimut) {
		super();
		this.Vrema = Vrema;
		if ((OsnIzmVel.length != this.OsnIzmVel.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.OsnIzmVel = OsnIzmVel;
		this.Temper = Temper;
		this.Skorost = Skorost;
		this.Moschnost = Moschnost;
		this.Azimut = Azimut;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected _DataFrame newInstance() { return new _DataFrame(); }
	public static _DataFrame[] newArray(int arrayLength) {
		return Structure.newArray(_DataFrame.class, arrayLength);
	}
	public static class ByReference extends _DataFrame implements Structure.ByReference {
		
	};
	public static class ByValue extends _DataFrame implements Structure.ByValue {
		
	};
}
